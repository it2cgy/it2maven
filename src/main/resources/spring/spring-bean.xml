<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"     
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      
    xmlns:aop="http://www.springframework.org/schema/aop"     
    xmlns:tx="http://www.springframework.org/schema/tx"     
    xmlns:context="http://www.springframework.org/schema/context"     
    xsi:schemaLocation="      
          http://www.springframework.org/schema/beans      
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd      
          http://www.springframework.org/schema/tx      
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd     
          http://www.springframework.org/schema/context      
          http://www.springframework.org/schema/context/spring-context-3.0.xsd      
          http://www.springframework.org/schema/aop      
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd" default-autowire="byName">  
    
	<context:component-scan base-package="com.itself.service"/> 
	<context:component-scan base-package="com.itself.dao"/> 
    <!-- 指定connector连接信息的属性文件的位置 -->
    <context:property-placeholder location="classpath:spring/jdbc.properties" />
    
    <!-- 配置数据源,包含connector的驱动名称，地址，用户名以及密码 ,除了c3p0其实还有dbcp这种方式,但是hibernate官方已经宣布不再支持dbcp了-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 --> 
		 <property name="mapperLocations">
		 	<list>
		 		<value>classpath*:com/itself/**/mapping/*.xml</value>
		 	</list>
		 </property>
	</bean>
	
	<!-- basedao使用 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate"/>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	  <!-- set leval -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>	<!-- all exception rollback -->
    	</tx:attributes>
    </tx:advice>

	<!-- set class -->
<!-- 	<aop:config> -->
<!-- 	   	<aop:pointcut id="managerOperation" expression="execution(* com.itself.*.service.*Service.*(..)) or execution (* com.yunengzhe.*.*.service.*Service.*(..))"/>  -->
<!-- 	    <aop:advisor pointcut-ref="managerOperation" advice-ref="txAdvice"/> -->
<!--     </aop:config> -->


</beans>